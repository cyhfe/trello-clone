{"version":3,"sources":["utils/arrayUtils.ts","state/AppStateReducer.ts","api.ts","state/AppStateContext.tsx","state/withInitialState.tsx","styles.ts","utils/isHidden.ts","state/actions.ts","utils/useItemGrag.ts","components/card.tsx","components/newItemForm.tsx","utils/useFocus.ts","components/addNewItem.tsx","components/column.tsx","components/customDragLayer.tsx","App.tsx","index.tsx"],"names":["findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","copiedArray","cloneDeep","splice","insertItemAtIndex","removeItemAtIndex","appStateReducer","state","action","type","newLists","lists","slice","push","nanoid","text","payload","tasks","listId","draggedId","hoverId","dragIndex","hoverIndex","draggedItem","draggedItemId","hoveredItemId","sourceColumnId","targetColumnId","sourceColumnIndex","sourceCardIndex","targetColumnIndex","targetCardIndex","copiedLists","API_URL","process","WrappedComponent","AppStateContext","createContext","AppStateProvider","children","initialState","useReducer","dispatch","useEffect","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","Provider","value","getTasksByListId","find","list","props","useState","setLists","isLoading","setIsLoading","error","setError","a","data","Error","fetchInitialState","useAppState","useContext","DragPreviewContainer","styled","div","isHidden","isPreview","CustomDragLayerContainer","DragPreviewWrap","attrs","style","transform","position","x","y","itemType","Boolean","setDraggedItem","moveTask","useItemDrag","useDrag","end","drag","CardContainer","Card","columnId","ref","useRef","useDrop","accept","hover","drop","Container","Input","input","Button","button","primary","css","danger","Control","NewItemForm","onCancel","onAdd","setText","inputRef","current","focus","useFocus","onChange","e","target","onKeyPress","key","onClick","handleClickCreate","AddItemButton","dark","AddNewItem","showForm","setShowForm","toggleButtonText","ColumnWrap","ColumnContainer","Title","Column","length","map","task","addTask","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","AppContainer","AddListContainer","App","addList","ReactDOM","render","StrictMode","DndProvider","backend","document","getElementById"],"mappings":"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","file":"static/js/main.8472e05c.chunk.js","sourcesContent":["import { cloneDeep } from \"lodash\";\ntype Item = {\n  id: string;\n};\nexport const findItemIndexById = <TItem extends Item>(items: TItem[], id: string) => {\n  return items.findIndex((item) => item.id === id);\n};\n\nconst removeItemAtIndex = <TItem>(array: TItem[], index: number) => {\n  // return [...array.slice(0, index), ...array.slice(index + 1)];\n  const copiedArray = cloneDeep(array)\n  copiedArray.splice(index, 1)\n  return copiedArray\n};\n\nconst insertItemAtIndex = <TItem>(array: TItem[], item: TItem, index: number) => {\n  // return [...array.slice(0, index), item, ...array.slice(index)];\n  const copiedArray = cloneDeep(array)\n  copiedArray.splice(index, 0, item)\n  return copiedArray\n};\n\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number) => {\n  const item = array[from];\n  return insertItemAtIndex(removeItemAtIndex(array, from), item, to);\n};\n\n","import { nanoid } from \"nanoid\";\nimport { Action } from \"./actions\";\nimport { AppState } from \"./AppStateContext\";\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\";\nimport { cloneDeep } from \"lodash\";\nexport const appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      const newLists = state.lists.slice();\n      newLists.push({\n        id: nanoid(),\n        text: action.payload,\n        tasks: [],\n      });\n      return {\n        ...state,\n        lists: newLists,\n      };\n    }\n\n    case \"ADD_TASK\": {\n      let newLists = cloneDeep(state.lists);\n      const targetIndex = findItemIndexById(newLists, action.payload.listId);\n      const targetTasks = newLists[targetIndex].tasks;\n      targetTasks.push({\n        id: nanoid(),\n        text: action.payload.text,\n      });\n      return {\n        ...state,\n        lists: newLists,\n      };\n    }\n\n    case \"MOVE_LIST\": {\n      const { draggedId, hoverId } = action.payload;\n      const dragIndex = findItemIndexById(state.lists, draggedId);\n      const hoverIndex = findItemIndexById(state.lists, hoverId);\n      const newLists = moveItem(state.lists, dragIndex, hoverIndex);\n      return {\n        ...state,\n        lists: newLists,\n      };\n    }\n\n    case \"SET_DRAGGED_ITEM\": {\n      const draggedItem = action.payload;\n      return {\n        ...state,\n        draggedItem,\n      };\n    }\n\n    case \"MOVE_TASK\": {\n      const { draggedItemId, hoveredItemId, sourceColumnId, targetColumnId } =\n        action.payload;\n\n      const { lists } = state;\n\n      const sourceColumnIndex = findItemIndexById(lists, sourceColumnId);\n      const sourceCardIndex = findItemIndexById(\n        lists[sourceColumnIndex].tasks,\n        draggedItemId\n      );\n\n      const targetColumnIndex = findItemIndexById(lists, targetColumnId);\n      const targetCardIndex = hoveredItemId\n        ? findItemIndexById(lists[targetColumnIndex].tasks, hoveredItemId)\n        : 0;\n\n      const copiedLists = cloneDeep(lists);\n\n      const item = copiedLists[sourceColumnIndex].tasks[sourceCardIndex];\n      copiedLists[sourceColumnIndex].tasks.splice(sourceCardIndex, 1);\n      copiedLists[targetColumnIndex].tasks.splice(targetCardIndex, 0, item);\n      // debugger;\n      return {\n        ...state,\n        lists: copiedLists,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { List } from './state/AppStateContext';\ntype Payload = {\n  lists: List[];\n};\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const save = (payload: Payload) => {\n  return fetch(`${API_URL}/api/save`, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  }).then((res) => {\n    return res.json();\n  });\n};\n\nexport const load = () => {\n  return fetch(`${API_URL}/api/load`, {\n    method: 'get',\n  }).then((res) => {\n    return res.json() as Promise<Payload>;\n  });\n};\n","import { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { appStateReducer } from \"./AppStateReducer\";\nimport { Action } from \"./actions\";\nimport { DragItem } from \"../dragItem\";\nimport { save } from \"../api\";\nimport { withInitialState } from \"./withInitialState\";\n\ntype Task = {\n  id: string;\n  text: string;\n};\n\nexport type List = {\n  id: string;\n  text: string;\n  tasks: Task[];\n};\n\nexport type AppState = {\n  lists: List[];\n  draggedItem: DragItem | null;\n};\n\ntype AppStateContextProps = {\n  lists: List[];\n  getTasksByListId(id: string): Task[];\n  dispatch: React.Dispatch<Action>;\n  draggedItem: DragItem | null;\n};\n\nconst AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n);\n\ntype AppStateProviderProps = {\n  children: React.ReactNode\n  initialState: AppState\n}\n\nexport const AppStateProvider = withInitialState<AppStateProviderProps>(\n  ({ children, initialState }) => {\n    const [state, dispatch] = useReducer(appStateReducer, initialState);\n    const { lists, draggedItem } = state;\n    const getTasksByListId = (id: string) => {\n      return lists.find((list) => list.id === id)?.tasks || [];\n    };\n\n    useEffect(() => {\n      save({\n        lists: state.lists,\n      });\n    }, [state]);\n\n    return (\n      <AppStateContext.Provider\n        value={{ lists, draggedItem, getTasksByListId, dispatch }}\n      >\n        {children}\n      </AppStateContext.Provider>\n    );\n  }\n);\n\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};\n","import { useState, useEffect } from \"react\";\nimport { AppState, List } from \"../state/AppStateContext\";\nimport { load } from \"../api\";\n\ntype InjectedProps = {\n  initialState: AppState;\n};\n\ntype PropsWithoutInjected<TBaseProps> = Omit<TBaseProps, keyof InjectedProps>;\n\nexport function withInitialState<TProps>(\n  WrappedComponent: React.ComponentType<\n    PropsWithoutInjected<TProps> & InjectedProps\n  >\n) {\n  return (props: PropsWithoutInjected<TProps>) => {\n    const [lists, setLists] = useState<List[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState<Error | undefined>();\n\n    useEffect(() => {\n      const fetchInitialState = async () => {\n        try {\n          const data = await load();\n          setLists(data.lists);\n        } catch (e) {\n          if (e instanceof Error) {\n            setError(e);\n          }\n        }\n        setIsLoading(false);\n      };\n      fetchInitialState();\n    }, []);\n\n    if (isLoading) {\n      return <div>Loading</div>;\n    }\n\n    if (error) {\n      return <div>error</div>;\n    }\n    const initialState: AppState = {\n      draggedItem: null,\n      lists,\n    };\n    return <WrappedComponent {...props} initialState={initialState} />;\n  };\n}\n","import styled from \"styled-components\";\n\ntype DragPreviewContainerProps = {\n  isHidden?: boolean;\n  isPreview?: boolean;\n};\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  opacity: ${(props) => (props.isHidden ? 0 : 1)};\n  transform: ${(props) => (props.isPreview ? `rotate(5deg)` : null)};\n`;\n\nexport const CustomDragLayerContainer = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  z-index: 100;\n`;\n\ntype DragPreviewWrapProps = {\n  position: {\n    x: number;\n    y: number;\n  };\n};\n\nexport const DragPreviewWrap = styled.div.attrs<DragPreviewWrapProps>(\n  (props) => ({\n    style: {\n      transform: `translate(${props.position.x}px,${props.position.y}px)`,\n    },\n  })\n)<DragPreviewWrapProps>``;\n","import { DragItem } from \"../dragItem\";\n\nexport const isHidden = (\n  draggedItem: DragItem | null,\n  itemType: string,\n  id: string,\n  isPreview?: boolean\n): boolean => {\n  return Boolean(\n    !isPreview &&\n      draggedItem &&\n      draggedItem.id === id &&\n      draggedItem.type === itemType\n  );\n};\n","import { DragItem } from \"../dragItem\";\n\nconst ADD_LIST = \"ADD_LIST\";\nconst ADD_TASK = \"ADD_TASK\";\nconst MOVE_LIST = \"MOVE_LIST\";\nconst SET_DRAGGED_ITEM = \"SET_DRAGGED_ITEM\";\nconst MOVE_TASK = \"MOVE_TASK\";\n\ntype AddListAction = {\n  type: \"ADD_LIST\";\n  payload: string;\n};\n\ntype AddTaskAction = {\n  type: \"ADD_TASK\";\n  payload: {\n    listId: string;\n    text: string;\n  };\n};\n\ntype MoveListAction = {\n  type: \"MOVE_LIST\";\n  payload: {\n    draggedId: string;\n    hoverId: string;\n  };\n};\n\ntype MoveTaskAction = {\n  type: \"MOVE_TASK\";\n  payload: {\n    draggedItemId: string;\n    hoveredItemId: string | null;\n    sourceColumnId: string;\n    targetColumnId: string;\n  };\n};\n\ntype SetDraggedItemAction = {\n  type: \"SET_DRAGGED_ITEM\";\n  payload: DragItem | null;\n};\n\nexport type Action =\n  | AddListAction\n  | AddTaskAction\n  | MoveListAction\n  | SetDraggedItemAction\n  | MoveTaskAction;\n\nexport const addList = (text: string): Action => {\n  return {\n    type: ADD_LIST,\n    payload: text,\n  };\n};\n\nexport const addTask = (text: string, listId: string): Action => {\n  return {\n    type: ADD_TASK,\n    payload: {\n      text,\n      listId,\n    },\n  };\n};\n\nexport const moveList = (draggedId: string, hoverId: string): Action => {\n  return {\n    type: MOVE_LIST,\n    payload: {\n      draggedId,\n      hoverId,\n    },\n  };\n};\n\nexport const setDraggedItem = (draggedItem: DragItem | null): Action => {\n  return {\n    type: SET_DRAGGED_ITEM,\n    payload: draggedItem,\n  };\n};\n\nexport const moveTask = (\n  draggedItemId: string,\n  hoveredItemId: string | null,\n  sourceColumnId: string,\n  targetColumnId: string\n): Action => {\n  return {\n    type: MOVE_TASK,\n    payload: {\n      draggedItemId,\n      hoveredItemId,\n      sourceColumnId,\n      targetColumnId,\n    },\n  };\n};\n","import { useDrag } from \"react-dnd\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { DragItem } from \"../dragItem\";\nimport { setDraggedItem } from \"../state/actions\";\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState();\n  const [, drag] = useDrag({\n    type: item.type,\n    item: () => {\n      dispatch(setDraggedItem(item));\n      return item;\n    },\n    end: () => {\n      dispatch(setDraggedItem(null));\n    },\n  });\n  return { drag };\n};\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { DragPreviewContainer } from \"../styles\";\nimport { isHidden } from \"../utils/isHidden\";\nimport { useItemDrag } from \"../utils/useItemGrag\";\nimport { useDrop } from \"react-dnd\";\nimport { moveTask, setDraggedItem } from \"../state/actions\";\n\nconst CardContainer = styled(DragPreviewContainer)`\n  width: ${(props) => (props.isPreview ? \"276px\" : null)};\n  background-color: #fff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  border-radius: 3px;\n  box-shadow: #091e4240 0.5px 1px 0px 0px;\n`;\n\ntype CardProps = {\n  id: string;\n  columnId: string;\n  text: string;\n  isPreview?: boolean;\n};\n\nconst Card = ({ id, text, columnId, isPreview }: CardProps) => {\n  const { draggedItem, dispatch } = useAppState();\n  const ref = useRef<HTMLDivElement>(null);\n  const { drag } = useItemDrag({\n    id,\n    text,\n    columnId,\n    type: \"CARD\",\n  });\n\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n    hover() {\n      if (!draggedItem) return;\n      if (draggedItem.type !== \"CARD\") return;\n      if (draggedItem.id === id) return;\n      dispatch(moveTask(draggedItem.id, id, draggedItem.columnId, columnId));\n\n      // card移动后还保持drag状态，需要更新draggedItem\n      dispatch(setDraggedItem({ ...draggedItem, columnId }));\n    },\n  });\n\n  drag(drop(ref));\n  return (\n    <CardContainer\n      ref={ref}\n      isPreview={isPreview}\n      isHidden={isHidden(draggedItem, \"CARD\", id, isPreview)}\n    >\n      {text}\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useFocus } from \"../utils/useFocus\";\nconst Container = styled.div`\n  min-width: 276px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Input = styled.input`\n  padding: 8px;\n  border: 1px solid #ced4da;\n  border-radius: 3px;\n\n  &:focus {\n    border-color: #86b7fe;\n    outline: 0;\n    box-shadow: 0 0 0 0.25rem rgb(13 110 253 / 25%);\n  }\n  margin-bottom: 0.5rem;\n`;\n\ntype ButtonProps = {\n  primary?: boolean;\n  danger?: boolean;\n};\n\nconst Button = styled.button<ButtonProps>`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  vertical-align: middle;\n  cursor: pointer;\n  user-select: none;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out,\n    box-shadow 0.15s ease-in-out;\n  padding: 0.15rem 0.35rem;\n  margin-left: 10px;\n  ${(props) =>\n    props.primary &&\n    css`\n      color: #fff;\n      background-color: #1890ff;\n      border-color: #1890ff;\n    `}\n  ${(props) =>\n    props.danger &&\n    css`\n      color: #fff;\n      background-color: #ff4d4f;\n      border-color: #ff4d4f;\n    `}\n`;\n\nconst Control = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\ntype NewItemFormProps = {\n  onCancel(): void;\n  onAdd(text: string): void;\n};\n\nconst NewItemForm = ({ onCancel, onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\");\n  const inputRef = useFocus();\n  const handleAddText = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onAdd(text);\n    }\n  };\n  const handleClickCreate = (text: string) => {\n    if(!text) return\n    onAdd(text)\n    // setText('')\n  }\n  return (\n    <Container>\n      <Input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        ref={inputRef}\n        onKeyPress={handleAddText}\n      />\n      <Control>\n        <Button primary onClick={() => handleClickCreate(text)}>\n          Create\n        </Button>\n        <Button danger onClick={onCancel}>\n          Cancel\n        </Button>\n      </Control>\n    </Container>\n  );\n};\n\nexport default NewItemForm;\n","import { useRef, useEffect } from 'react'\n\nfunction useFocus() {\n  const ref = useRef<HTMLInputElement | null>(null)\n  useEffect(() => {\n    ref.current?.focus()\n  }, [])\n  return ref\n}\n\nexport { useFocus }\n","import React, { useState } from \"react\";\nimport NewItemForm from \"./newItemForm\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  min-width: 276px;\n  padding: 8px;\n  background-color: #ffffff3d;\n  &:hover {\n    background-color: #ffffff52;\n  }\n  border-radius: 3px;\n  cursor: pointer;\n`;\n\ntype AddItemButtomProps = {\n  dark?: boolean;\n};\n\nconst AddItemButton = styled.div<AddItemButtomProps>`\n  color: ${(props) => (props.dark ? \"#000\" : \"#fff\")};\n  text-align: left;\n  transition: background 85ms ease-in;\n`;\n\ntype AddNewItemProps = {\n  toggleButtonText: string;\n  onAdd(text: string): void;\n  dark?: boolean;\n};\n\nconst AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState<boolean>(false);\n\n  const handleCancel = () => {\n    setShowForm(false);\n  };\n\n  const handleAdd = (text: string) => {\n    setShowForm(false);\n    props.onAdd(text);\n  };\n  \n  if (showForm) {\n    return <NewItemForm onCancel={handleCancel} onAdd={handleAdd} />;\n  }\n\n  return (\n    <Container>\n      <AddItemButton\n        dark={props.dark}\n        onClick={() => {\n          setShowForm(true);\n        }}\n      >\n        {props.toggleButtonText}\n      </AddItemButton>\n    </Container>\n  );\n};\n\nexport default AddNewItem;\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport Card from \"./card\";\nimport AddNewItem from \"./addNewItem\";\nimport { addTask, moveList, moveTask, setDraggedItem } from \"../state/actions\";\nimport { useItemDrag } from \"../utils/useItemGrag\";\nimport { useDrop } from \"react-dnd\";\nimport { DragPreviewContainer } from \"../styles\";\nimport { isHidden } from \"../utils/isHidden\";\n\nconst ColumnWrap = styled.div`\n  min-width: 320px;\n  width: 320px;\n  padding-right: 20px;\n`;\n\nconst ColumnContainer = styled(DragPreviewContainer)`\n  border-radius: 3px;\n  padding: 12px;\n  background-color: #ebecf0;\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n  margin-bottom: 8px;\n`;\n\ntype ColumnProps = {\n  id: string;\n  text: string;\n  isPreview?: boolean;\n};\n\nconst Column = ({ id, text, isPreview }: ColumnProps) => {\n  const { getTasksByListId, dispatch, draggedItem } = useAppState();\n  const tasks = getTasksByListId(id);\n  const ref = useRef<HTMLDivElement>(null);\n  const { drag } = useItemDrag({ id, text, type: \"COLUMN\" });\n  const [, drop] = useDrop({\n    accept: [\"COLUMN\", \"CARD\"],\n    hover() {\n      if (!draggedItem) return;\n      if (draggedItem.type === \"COLUMN\") {\n        if (draggedItem.id === id) return;\n        dispatch(moveList(draggedItem.id, id));\n        return;\n      }\n      if (draggedItem.type === \"CARD\") {\n        if (draggedItem.columnId === id) return;\n        if (tasks.length) return;\n        dispatch(moveTask(draggedItem.id, null, draggedItem.columnId, id));\n        dispatch(setDraggedItem({ ...draggedItem, columnId: id }));\n      }\n    },\n  });\n  drag(drop(ref));\n  return (\n    <ColumnWrap>\n      <ColumnContainer\n        ref={ref}\n        isHidden={isHidden(draggedItem, \"COLUMN\", id, isPreview)}\n        isPreview={isPreview}\n      >\n        <Title>{text}</Title>\n        {tasks.map((task) => {\n          return (\n            <Card key={task.id} text={task.text} columnId={id} id={task.id} />\n          );\n        })}\n        <AddNewItem\n          toggleButtonText={\"+ add another item\"}\n          onAdd={(text) => dispatch(addTask(text, id))}\n          dark\n        />\n      </ColumnContainer>\n    </ColumnWrap>\n  );\n};\n\nexport default Column;\n","import { useDragLayer } from \"react-dnd\";\nimport Column from \"../components/column\";\nimport { CustomDragLayerContainer } from \"../styles\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { DragPreviewWrap } from \"../styles\";\nimport Card from \"./card\";\n\nexport const CustomDragLayer = () => {\n  const { draggedItem } = useAppState();\n  const { currentOffset } = useDragLayer((monitor) => {\n    return {\n      currentOffset: monitor.getSourceClientOffset(),\n    };\n  });\n  // return (\n  //   <CustomDragLayerContainer>\n  //     <DragPreviewWrap position={currentOffset}>\n  //       <Column id={\"0\"} text={\"s\"} isPreview />\n  //     </DragPreviewWrap>\n  //   </CustomDragLayerContainer>\n  // );\n  return draggedItem && currentOffset ? (\n    draggedItem.type === \"COLUMN\" ? (\n      <CustomDragLayerContainer>\n        <DragPreviewWrap position={currentOffset}>\n          <Column\n            id={draggedItem.id}\n            text={draggedItem.text}\n            isPreview\n          />\n        </DragPreviewWrap>\n      </CustomDragLayerContainer>\n    ) : (\n      <CustomDragLayerContainer>\n        <DragPreviewWrap position={currentOffset}>\n          <Card\n            id={draggedItem.id}\n            text={draggedItem.text}\n            columnId={draggedItem.columnId}\n            isPreview\n          />\n        </DragPreviewWrap>\n      </CustomDragLayerContainer>\n    )\n  ) : null;\n};\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport Column from \"./components/column\";\nimport AddNewItem from \"./components/addNewItem\";\nimport { CustomDragLayer } from \"./components/customDragLayer\";\n\nimport { useAppState } from \"./state/AppStateContext\";\nimport { addList } from \"./state/actions\";\n\nconst AppContainer = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: flex-start;\n  flex: 0 0 320px;\n  padding: 20px;\n`;\n\nconst AddListContainer = styled.div`\n  padding-right: 20px;\n`;\n\nfunction App() {\n  const { lists, dispatch } = useAppState();\n  return (\n    <AppContainer>\n      <CustomDragLayer />\n      {lists.map((list) => {\n        return <Column text={list.text} id={list.id} key={list.id} />;\n      })}\n      <AddListContainer>\n        <AddNewItem\n          onAdd={(text) => dispatch(addList(text))}\n          toggleButtonText=\"+ add another list\"\n        />\n      </AddListContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HTML5Backend as backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nimport \"normalize.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nimport { AppStateProvider } from \"./state/AppStateContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={backend}>\n      <AppStateProvider>\n        <App />\n      </AppStateProvider>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}